[
  {
    "objectID": "HW04.html",
    "href": "HW04.html",
    "title": "HW04",
    "section": "",
    "text": "Task 1:Conceptual Questions\n\n1. If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\nFor this we will navigate up one level from homework to myfolder and after that we will specify the file name. ../MyData.csv after that we can use the relative path my_data &lt;- read_csv(“../MyData.csv”)\n\n\n2. What are the major benefits of using R projects?\nAns:- R language is good for Machine learning and data analysis. It have many features and libraries for performing data wrangling. R offers a host of packages that help data anlysts turn unstructured, messy data into a structured format. The main reason for using R project is Reproducibility. If you are using Rstudio projects, and write code that you share with others and they will be able to run . It will make straightforward to divide your work into multiple contexts, each with their own working directory, workspace, history, and source documents.\n\n\n3. What is git and what is github?\nAns:- GIT:- Git is a version control system thst intelligently tracks changes in files. Git is particularly useful when you and a group of people are all making changes to the same files at the same time. Here are some featutes of using GIt.:\nVersion control:- Git tracks changes to files over time, allowing you to revert to previous versions, compare changes, and collaborate with others.\nBranching: Developers can create separate branches to work on different features or bug fixes independently and then merge them back into the main codebase.\nDistributed: Every developer has a complete local copy of the repository, which allows for offline work and fast operations.\nGithub:- GitHub is a cloud-based platform where you can store, share, and work together with others to write code. This is built on Git by adding more features like:-\nRemote Repositories: GitHub allows you to store your Git repositories in the cloud, making it easier to collaborate with others.\nCollaboration Tools: GitHub includes features like pull requests, issues, project boards, and wikis to help teams manage projects and track work.\nVersion Control in the Cloud: Developers can push their local repositories to GitHub to share with others or back up their work.\nCommunity and Open Source: GitHub hosts millions of open-source projects and has a thriving community where developers contribute, fork, and collaborate on public projects.\n\n\n4. What are the two main differences between a tibble and a data.frame?\nhttps://jtr13.github.io/cc21fall1/tibble-vs.-dataframe.html Ans: There are mainly 3 differences :– Printing, subsetting, and recycling rules.\n\nWhen you access only one column of a tibble, it will keep the tibble structure. But when you access one column of a data frame, it will become a vector.\nWhen assigning a new column to a tibble, the input will not be recycled, which means you have to provide an input of the same length of the other columns. But a data frame will recycle the input.\nReading with builtin read.csv() function will output data frames, while reading with read_csv() in “readr” package inside tidyverse will output tibbles.\nTibbles cannot access a column when you provide a partial name of the column, but data frames can.\nTibbles don’t support support arithmetic operations on all columns well, the result will be converted into a data frame without any notice.\nTibbles preserve all the variable types, while data frames have the option to convert string into factor.\n\n\n\n5. Rewrite the following nested function call using BaseR’s chaining operator:\narrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\niris |&gt; as_tibble() |&gt; select(starts_with(“Petal”), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)\n\n\n\nTask 2 Reading Delimited Data\n\nRead the Glass data\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n# Get the data \nglass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",\n                       col_names = c(\"Id\", \"RI\",\"Na\",\"Mg\",\"Al\",\"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Glass_Type\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Glass_Type\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(glass_data)\n\n# A tibble: 6 × 11\n     Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Glass_Type\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0             1\n2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0             1\n3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0             1\n4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0             1\n5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0             1\n6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26          1\n\n\n\n#recode(): This function from dplyr is used to map each numeric value in the Type column to a descriptive string.\n\n\n# Give the appropriate name to every Glass Type\nglass_data &lt;- glass_data %&gt;%\n  mutate(Glass_type_name =  recode(Glass_Type,\n                                   '1' = \"Building_windows_float_processed\",                                    \n                                   '2' = \"Build-ing_windows_non_float_processed\",\n                                   '3' = \"Vehicle_windows_float_processed\",\n                                   '4' = \"Vehicle_windows_non_float_processed\",\n                                   '5' = \"Containers\",\n                                   '6' = \"Tableware\",\n                                   '7' = \"Headlamps\"\n                                   )\n  ) %&gt;%\n  filter(Fe &lt;0.2, Glass_type_name %in% c(\"Tableware\",\"Headlamps\"))\n\nglass_data\n\n# A tibble: 38 × 12\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Glass_Type\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0          6\n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0          6\n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0          6\n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0          6\n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0          6\n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0          6\n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0          6\n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0          6\n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0          6\n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0          7\n# ℹ 28 more rows\n# ℹ 1 more variable: Glass_type_name &lt;chr&gt;\n\n\n\n\nYeast data\n\n#yeast_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n#                         delim = \" \",\n#                         col_names = c(\"seq_name\", \"mcg\",\"gvh\",\"alm\",\"mit\",\" erl\",\"pox\",\"vac\",\"nuc\",\"class\")\n #                        )\n#\n#head(yeast_data)\n\n\n#ADT1_YEAST  0.58  0.61  0.47  0.13  0.50  0.00  0.48  0.22  MIT\n\n\n#yeast_data1 &lt;- read_fwf(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n#                        fwf_widths(12,6,6,6,6,6,6,6,6,3),\n #                       trim_ws = TRUE\n#)\n\n#colnames(yeast_data1) &lt;- c(\"seq_name\", \"mcg\",\"gvh\",\"alm\",\"mit\",\" erl\",\"pox\",\"vac\",\"nuc\",\"class\")\n#head(yeast_data1)\n\n\n# Read the YeAST data into a tibble\nyeast_data &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n                         col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")\n                         )\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nhead(yeast_data)\n\n# A tibble: 6 × 10\n  seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n\n\n\n# Start a chain that removes the seq_name and nuc columns.\n# Continue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping \nFilter_yeast_data1 &lt;- yeast_data |&gt;\n  select(-c(\"seq_name\",\"nuc\")) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, sd = sd), .names = \"{.col}_{.fn}\")\n         )\n\nhead(Filter_yeast_data1)\n\n# A tibble: 6 × 22\n    mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_sd gvh_mean\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.500  0.137    0.500\n2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.500  0.137    0.500\n3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.500  0.137    0.500\n4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.500  0.137    0.500\n5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.500  0.137    0.500\n6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.500  0.137    0.500\n# ℹ 11 more variables: gvh_sd &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_sd &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_sd &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_sd &lt;dbl&gt;, pox_mean &lt;dbl&gt;,\n#   pox_sd &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_sd &lt;dbl&gt;\n\n\n\n\n\nTask 3: Combining Excel and Delimited Data\n\nThere are two data sets that are ‘related to red and white variants of the Portuguese “Vinho Verde” wine.’ There are physicochemical variables and a quality score, as rated by experts.\n\n\n1. Import the data from the first sheet using the readxl package\n\nlibrary(readxl)\n\nwhite_wine &lt;- read_excel(\"/Users/artigupta/NCSU_R/Assignment/Homework3/Homework4/white-wine.xlsx\", sheet = 1)\nhead(white_wine)\n\n# A tibble: 6 × 12\n  `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n            &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n1               7               0.27          0.36             20.7     0.045\n2              63               0.3           0.34              1.6     0.049\n3              81               0.28          0.4               6.9     0.05 \n4              72               0.23          0.32              8.5     0.058\n5              72               0.23          0.32              8.5     0.058\n6              81               0.28          0.4               6.9     0.05 \n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n\n2. Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable names.\n\nfeature_name &lt;- read_excel(\"/Users/artigupta/NCSU_R/Assignment/Homework3/Homework4/white-wine.xlsx\", sheet = 2, col_names = FALSE )\n\nNew names:\n• `` -&gt; `...1`\n\nfeature_name\n\n# A tibble: 13 × 1\n   ...1                \n   &lt;chr&gt;               \n 1 Variables           \n 2 fixed_acidity       \n 3 volatile_acidity    \n 4 citric_acid         \n 5 residual_sugar      \n 6 chlorides           \n 7 free_sulfur_dioxide \n 8 total_sulfur_dioxide\n 9 density             \n10 pH                  \n11 sulphates           \n12 alcohol             \n13 quality             \n\n#structure of the data frame\nstr(feature_name)\n\ntibble [13 × 1] (S3: tbl_df/tbl/data.frame)\n $ ...1: chr [1:13] \"Variables\" \"fixed_acidity\" \"volatile_acidity\" \"citric_acid\" ...\n\nhead(feature_name)\n\n# A tibble: 6 × 1\n  ...1            \n  &lt;chr&gt;           \n1 Variables       \n2 fixed_acidity   \n3 volatile_acidity\n4 citric_acid     \n5 residual_sugar  \n6 chlorides       \n\n\n\n\nGrab that column and overwrite the current column names (colnames()) of your white wine tibble\n\n#print(feature_name[2:13, 1])\n\n\n#new_col &lt;- feature_name[[1]]\n#length(new_col)\n# Take the feature name from row 2 to 13 from column 1. \nfeature_new &lt;- pull(feature_name[2:13, 1])\ncolnames(white_wine) &lt;- feature_new\n#new_col &lt;- feature_name[2:13, 1]\n#length(new_col)\n#new_col &lt;- as.character(new_col)\n#new_col\n#new_col &lt;- trimws(new_col)\n#cat(sprint('\"%s\"\\n, featrue))\n#colnames(white_wine)\n#length(new_col)\n#ncol(new_col)\n#str(new_col)\n#colnames(white_wine) &lt;- new_col\nhead(white_wine)\n\n# A tibble: 6 × 12\n  fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n          &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n1             7             0.27        0.36           20.7     0.045\n2            63             0.3         0.34            1.6     0.049\n3            81             0.28        0.4             6.9     0.05 \n4            72             0.23        0.32            8.5     0.058\n5            72             0.23        0.32            8.5     0.058\n6            81             0.28        0.4             6.9     0.05 \n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n\n3. Add a column to this data set to indicate the wines are white.\n\n# add one column in the data set and give the value to all the rows to white\nwhite_wine[\"Wine_Type\"] &lt;- \"White\"\n\n#view(white_wine)\nhead(white_wine)\n\n# A tibble: 6 × 13\n  fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n          &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n1             7             0.27        0.36           20.7     0.045\n2            63             0.3         0.34            1.6     0.049\n3            81             0.28        0.4             6.9     0.05 \n4            72             0.23        0.32            8.5     0.058\n5            72             0.23        0.32            8.5     0.058\n6            81             0.28        0.4             6.9     0.05 \n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   Wine_Type &lt;chr&gt;\n\n\n\n\n4. Read a dataset for red wine\n\nlibrary(readr)\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", delim = \";\", col_names = TRUE)\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(red_wine)\n\n# A tibble: 6 × 12\n  `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n            &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n1             7.4               0.7           0                 1.9     0.076\n2             7.8               0.88          0                 2.6     0.098\n3             7.8               0.76          0.04              2.3     0.092\n4            11.2               0.28          0.56              1.9     0.075\n5             7.4               0.7           0                 1.9     0.076\n6             7.4               0.66          0                 1.8     0.075\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\ncolnames(red_wine) &lt;- feature_new\n#view(red_wine)\n# convert all the data type character to numeric\nred_wine &lt;- red_wine |&gt;\n  mutate(across(everything(), as.numeric))\nhead(red_wine)\n\n# A tibble: 6 × 12\n  fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n          &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n1           7.4             0.7         0               1.9     0.076\n2           7.8             0.88        0               2.6     0.098\n3           7.8             0.76        0.04            2.3     0.092\n4          11.2             0.28        0.56            1.9     0.075\n5           7.4             0.7         0               1.9     0.076\n6           7.4             0.66        0               1.8     0.075\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\n\n\nAdd the column for the wine Type\n\nred_wine[\"Wine_Type\"] &lt;- \"Red\"\n#view(red_wine)\nhead(red_wine)\n\n# A tibble: 6 × 13\n  fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n          &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n1           7.4             0.7         0               1.9     0.076\n2           7.8             0.88        0               2.6     0.098\n3           7.8             0.76        0.04            2.3     0.092\n4          11.2             0.28        0.56            1.9     0.075\n5           7.4             0.7         0               1.9     0.076\n6           7.4             0.66        0               1.8     0.075\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   Wine_Type &lt;chr&gt;\n\n\n\n5. Combine these two data sets into one data set\n\nwine_data &lt;- dplyr::bind_rows(white_wine, red_wine)\nhead(wine_data)\n\n# A tibble: 6 × 13\n  fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n          &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n1             7             0.27        0.36           20.7     0.045\n2            63             0.3         0.34            1.6     0.049\n3            81             0.28        0.4             6.9     0.05 \n4            72             0.23        0.32            8.5     0.058\n5            72             0.23        0.32            8.5     0.058\n6            81             0.28        0.4             6.9     0.05 \n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   Wine_Type &lt;chr&gt;\n\n\n\n#view(red_wine)\n#view(white_wine)\n\n\n\n6. filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132)\n\n\n7. sort the data from highest quality to lowest\n\n\n8. select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\n\nfilter_data &lt;- wine_data |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, Wine_Type, quality)\nview(filter_data)\n\n\n\n9. add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.\n\nmean_sd_wine_data &lt;- wine_data |&gt;\n  group_by(quality) |&gt;\n  select(alcohol) |&gt;\n  mutate(alcohol_mean = mean(alcohol, na.rm = TRUE),\n         alcohol_sd = sd(alcohol, na.rm = TRUE))\n\nAdding missing grouping variables: `quality`\n\n\n\nhead(mean_sd_wine_data)\n\n# A tibble: 6 × 4\n# Groups:   quality [1]\n  quality alcohol alcohol_mean alcohol_sd\n    &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n1       6      88      1.24e12    2.65e13\n2       6      95      1.24e12    2.65e13\n3       6     101      1.24e12    2.65e13\n4       6      99      1.24e12    2.65e13\n5       6      99      1.24e12    2.65e13\n6       6     101      1.24e12    2.65e13\n\nview(mean_sd_wine_data)"
  }
]